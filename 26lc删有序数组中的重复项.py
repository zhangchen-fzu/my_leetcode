'''
#############################################################################################################
**题目：26（数组）
给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 只出现一次 ，返回删除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。
**示例：
输入：nums = [1,1,2]
输出：2, nums = [1,2]
解释：函数应该返回新的长度 2 ，并且原数组 nums 的前两个元素被修改为 1, 2 。不需要考虑数组中超出新长度后面的元素。
**条件：
0 <= nums.length <= 3 * 104
-104 <= nums[i] <= 104
nums 已按升序排列
#############################################################################################################
'''

'''
快慢指针方法：
该题涉及到有序数组+原地修改，使用快慢指针来解题
慢指针控制位置，快指针去寻找与当前值不一致的值，寻找到则放在慢指针的下一个位置，
若快慢指针下的值相同，则快指针继续去后面寻找不一样的值，找到后将快指针指的值放在慢指针的后一位置上，此时就达到了将重复的值搞到后面，非重复值挪到前面的目的；
若快慢指针下的值不相同，则同时移动快慢指针，去判断比较后面的值是否相同。
复杂度分析：
时间复杂度：O(N)
空间复杂度：未占用额外空间O(1)
'''
class Solution1(object):
    def removeDuplicates(self, nums):
        slow = fast = 0
        while fast < len(nums):
            if nums[slow] != nums[fast]:
                slow += 1
                nums[slow] = nums[fast]
            fast += 1
        return slow + 1


'''
#############################################################################################################
**题目：27（数组）
给你一个数组 nums 和一个值 val，你需要 原地 移除所有数值等于 val 的元素，并返回移除后数组的新长度。
不要使用额外的数组空间，你必须仅使用 O(1) 额外空间并 原地 修改输入数组。
元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。
**示例：
输入：nums = [3,2,2,3], val = 3
输出：2, nums = [2,2]
解释：函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。你不需要考虑数组中超出新长度后面的元素。例如，函数返回的新长度为 2 ，而 nums = [2,2,3,3] 或 nums = [2,2,0,0]，也会被视作正确答案。
**条件：
0 <= nums.length <= 100
0 <= nums[i] <= 50
0 <= val <= 100
#############################################################################################################
'''

'''
快慢指针方法：
原地修改，依然适用双指针，慢指针代表该放置的位置，快指针代表该放置的值
若快指针等于目标值，则继续移动快指针去寻找非目标值
若快指针不等于目标值，则将快指针下的值赋给慢指针，快慢指针后移
复杂度分析：
时间复杂度：O(N)
空间度复杂度：O(1)
'''
class Solution2(object):
    def removeElement(self, nums, val):
        slow = fast = 0
        while fast < len(nums):
            if nums[fast] != val:
                nums[slow] = nums[fast]
                slow += 1
            fast += 1
        return slow
