'''
#############################################################################################################
**题目78：（回溯）
给你一个整数数组 nums ，数组中的元素 互不相同 。返回该数组所有可能的子集（幂集）。
解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。
**示例：
输入：nums = [1,2,3]
输出：[[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]
**条件：
1 <= nums.length <= 10
-10 <= nums[i] <= 10
nums 中的所有元素 互不相同
#############################################################################################################
'''
'''
回溯方法：
因为元素不可重复使用，当向下递归时，会选择下一个索引位置作为起始值
解集中包含空集，进入递归前时，先将符合要求的子集添加到解集中
复杂度分析：
时间复杂度：O(N*2^N)
空间复杂度：O(N)
'''
class Solution(object):
    def __init__(self):
        self.res = []
    def subsets(self, nums):
        self.backtrack(nums, 0, [])
        return self.res
    def backtrack(self, nums, start, tmp):
        self.res.append(tmp[:])
        for i in range(start, len(nums)):
            tmp.append(nums[i])
            self.backtrack(nums, i + 1, tmp)
            tmp.pop()