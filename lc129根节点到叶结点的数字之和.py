'''
#############################################################################################################
**题目129：（二叉树）
给你一个二叉树的根节点 root ，树中每个节点都存放有一个 0 到 9 之间的数字。
每条从根节点到叶节点的路径都代表一个数字：
例如，从根节点到叶节点的路径 1 -> 2 -> 3 表示数字 123 。
计算从根节点到叶节点生成的 所有数字之和 。
叶节点 是指没有子节点的节点。
**示例：
输入：root = [1,2,3]
输出：25
解释：
从根到叶子节点路径 1->2 代表数字 12
从根到叶子节点路径 1->3 代表数字 13
因此，数字总和 = 12 + 13 = 25
**条件：
树中节点的数目在范围 [1, 1000] 内
0 <= Node.val <= 9
树的深度不超过 10
#############################################################################################################
'''

'''
迭代方法：
每条路径上的节点值都记录到数字中，当前结点需要做的事情是：将该结点的值加入到数字中
其他节点的计算通过迭代实现
复杂度分析：
时间复杂度：O(N)
空间复杂度：O(H)
'''
class Solution(object):
    def __init__(self):
        self.res = 0
    def sumNumbers(self, root):
        self.sub(root, 0)
        return self.res
    def sub(self, root, sums):
        if not root:
            return
        sums = sums * 10 + root.val
        if not root.left and not root.right:
            self.res += sums
            return
        self.sub(root.left, sums)
        self.sub(root.right, sums)


